/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package rocket;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class tenDOF_t implements lcm.lcm.LCMEncodable
{
    public long time;
    public double Yaw;
    public double Pitch;
    public double Roll;
    public double MagX;
    public double MagY;
    public double MagZ;
    public double AccelX;
    public double AccelY;
    public double AccelZ;
    public double GyroX;
    public double GyroY;
    public double GyroZ;
    public double Temp;
    public double Press;
 
    public tenDOF_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa53d1745ef404369L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(rocket.tenDOF_t.class))
            return 0L;
 
        classes.add(rocket.tenDOF_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.time); 
 
        outs.writeDouble(this.Yaw); 
 
        outs.writeDouble(this.Pitch); 
 
        outs.writeDouble(this.Roll); 
 
        outs.writeDouble(this.MagX); 
 
        outs.writeDouble(this.MagY); 
 
        outs.writeDouble(this.MagZ); 
 
        outs.writeDouble(this.AccelX); 
 
        outs.writeDouble(this.AccelY); 
 
        outs.writeDouble(this.AccelZ); 
 
        outs.writeDouble(this.GyroX); 
 
        outs.writeDouble(this.GyroY); 
 
        outs.writeDouble(this.GyroZ); 
 
        outs.writeDouble(this.Temp); 
 
        outs.writeDouble(this.Press); 
 
    }
 
    public tenDOF_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public tenDOF_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static rocket.tenDOF_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        rocket.tenDOF_t o = new rocket.tenDOF_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time = ins.readLong();
 
        this.Yaw = ins.readDouble();
 
        this.Pitch = ins.readDouble();
 
        this.Roll = ins.readDouble();
 
        this.MagX = ins.readDouble();
 
        this.MagY = ins.readDouble();
 
        this.MagZ = ins.readDouble();
 
        this.AccelX = ins.readDouble();
 
        this.AccelY = ins.readDouble();
 
        this.AccelZ = ins.readDouble();
 
        this.GyroX = ins.readDouble();
 
        this.GyroY = ins.readDouble();
 
        this.GyroZ = ins.readDouble();
 
        this.Temp = ins.readDouble();
 
        this.Press = ins.readDouble();
 
    }
 
    public rocket.tenDOF_t copy()
    {
        rocket.tenDOF_t outobj = new rocket.tenDOF_t();
        outobj.time = this.time;
 
        outobj.Yaw = this.Yaw;
 
        outobj.Pitch = this.Pitch;
 
        outobj.Roll = this.Roll;
 
        outobj.MagX = this.MagX;
 
        outobj.MagY = this.MagY;
 
        outobj.MagZ = this.MagZ;
 
        outobj.AccelX = this.AccelX;
 
        outobj.AccelY = this.AccelY;
 
        outobj.AccelZ = this.AccelZ;
 
        outobj.GyroX = this.GyroX;
 
        outobj.GyroY = this.GyroY;
 
        outobj.GyroZ = this.GyroZ;
 
        outobj.Temp = this.Temp;
 
        outobj.Press = this.Press;
 
        return outobj;
    }
 
}

